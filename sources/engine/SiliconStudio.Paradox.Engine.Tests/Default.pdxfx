// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
using SiliconStudio.Paradox.Effects.Data;

namespace Test
{
    // Spawn a sub-shader for the GBuffer pass
    partial shader GBufferShaderPass
    {
        // Clone the current state of mixins into this shader
        mixin clone;
        mixin GBuffer;
        mixin NormalVSStream;
    };

    // Partial shader for GBuffer
    partial shader GBufferPlugin
    {
        mixin child GBufferShaderPass;

        // Remove somes mixins from current state
        mixin remove PositionVSStream;    
        mixin remove NormalVSStream;
        mixin remove SpecularPowerPerMesh;
        
        // Use Position, Normal and specular power from GBuffer
        mixin NormalVSGBuffer;        // Add mixin to current state
        mixin PositionVSGBuffer;
        mixin SpecularPowerGBuffer;
    };

    shader LightPrepassEffect
    {
        mixin LightPrepass;
        mixin PositionVSGBuffer;
        mixin NormalVSGBuffer;
        mixin SpecularPowerGBuffer;
        mixin compose DiffuseColor = ComputeBRDFColorFresnel;
        mixin compose DiffuseLighting = ComputeBRDFDiffuseLambert;
        mixin compose SpecularColor = ComputeBRDFColor;
        mixin compose SpecularLighting = ComputeBRDFColorSpecularBlinnPhong;
    }
    
    shader Default
    {
        using params RenderingParameters;
        using params MaterialParameters;
        using params EffectSystem;

        mixin ShaderBase;
        mixin TransformationWAndVP;
        mixin BRDFDiffuseBase;
        mixin BRDFSpecularBase;
        mixin AlbedoFlatShading;

        if (MaterialParameters.AlbedoDiffuse != null)
        {
            mixin compose DiffuseColor = ComputeBRDFDiffuseLambert;
            mixin compose albedoDiffuse = MaterialParameters.AlbedoDiffuse;
        }

        if (MaterialParameters.AlbedoSpecular != null)
        {
            mixin compose SpecularColor = ComputeBRDFColorSpecularBlinnPhong;
            mixin compose albedoSpecular = MaterialParameters.AlbedoSpecular;
        }

        if (MaterialParameters.HasSkinningPosition)
        {
            if (MaterialParameters.SkinningBones > MaterialParameters.SkinningMaxBones)
            {
                // TODO: We should use next power of two minus constant to limit shader permutations?
                MaterialParameters.SkinningMaxBones = MaterialParameters.SkinningBones;
            }
            mixin macro MaterialParameters.SkinningMaxBones;
            mixin TransformationSkinning;
        }

        // Activate deferred rendering if flag is set
        // Disable deferred in case of Transparent
        if (RenderingParameters.UseDeferred && !RenderingParameters.UseTransparent)
        {
            mixin GBufferPlugin;
            mixin LightDeferredShading;
        }
    };
}