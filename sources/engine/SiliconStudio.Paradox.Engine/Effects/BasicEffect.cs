// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxfx.
// </auto-generated>

using SiliconStudio.Core;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Shaders;
using SiliconStudio.Core.Mathematics;
using SiliconStudio.Paradox.Graphics;


#line 3 "C:\Projects\Paradox\sources\engine\SiliconStudio.Paradox.Engine\Effects\BasicEffect.pdxfx"
using SiliconStudio.Paradox.Effects.Data;

#line 4
using SiliconStudio.Paradox.Shaders.Compiler;

#line 6
namespace ParadoxEffects
{
    [DataContract]
#line 8
    public partial class BasicEffectParameters : ShaderMixinParameters
    {

        #line 10
        public static readonly ParameterKey<bool> UsedNormalMap = ParameterKeys.New<bool>(false);
    };

    #line 13
    public partial class WithSkinning  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 19
            context.CloneProperties();

            #line 19
            mixin.Mixin.CloneFrom(mixin.Parent.Mixin);

            #line 20
            if (context.GetParam(MaterialParameters.HasSkinningPosition))
            {

                #line 22
                if (context.GetParam(MaterialParameters.SkinningBones) > context.GetParam(MaterialParameters.SkinningMaxBones))
                {

                    #line 25
                    context.SetParam(MaterialParameters.SkinningMaxBones, context.GetParam(MaterialParameters.SkinningBones));
                }

                #line 27
                mixin.Mixin.AddMacro("SkinningMaxBones", context.GetParam(MaterialParameters.SkinningMaxBones));

                #line 28
                context.Mixin(mixin, "TransformationSkinning");

                #line 30
                if (context.GetParam(MaterialParameters.HasSkinningNormal))
                {

                    #line 32
                    if (context.GetParam(BasicEffectParameters.UsedNormalMap))

                        #line 33
                        context.Mixin(mixin, "TangentToViewSkinning");

                    #line 35
                    else

                        #line 35
                        context.Mixin(mixin, "NormalVSSkinning");

                    #line 37
                    context.Mixin(mixin, "NormalSkinning");
                }

                #line 40
                if (context.GetParam(MaterialParameters.HasSkinningTangent))

                    #line 41
                    context.Mixin(mixin, "TangentSkinning");
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("WithSkinning", new WithSkinning());
        }
    }

    #line 45
    public partial class BasicEffect  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 53
            context.Mixin(mixin, "ShaderBase");

            #line 54
            context.Mixin(mixin, "TransformationWAndVP");

            #line 56
            context.Mixin(mixin, "PositionVSStream");

            #line 58
            if (context.GetParam(MaterialParameters.NormalMap) != null)
            {

                #line 60
                context.Mixin(mixin, "NormalMapTexture");

                {

                    #line 61
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 61
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.NormalMap));
                    mixin.Mixin.AddComposition("normalMap", __subMixin.Mixin);
                }

                #line 62
                context.SetParam(BasicEffectParameters.UsedNormalMap, true);
            }

            #line 65
            else
            {

                #line 66
                context.Mixin(mixin, "NormalVSStream");
            }

            #line 69
            context.Mixin(mixin, "BRDFDiffuseBase");

            #line 70
            context.Mixin(mixin, "BRDFSpecularBase");

            #line 71
            context.Mixin(mixin, "LightMultiDirectionalShadingPerPixel", 2);

            #line 72
            context.Mixin(mixin, "TransparentShading");

            #line 73
            context.Mixin(mixin, "DiscardTransparent");

            #line 75
            if (context.GetParam(MaterialParameters.AlbedoDiffuse) != null)
            {

                {

                    #line 77
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 77
                    context.Mixin(__subMixin, "ComputeBRDFDiffuseLambert");
                    mixin.Mixin.AddComposition("DiffuseLighting", __subMixin.Mixin);
                }

                {

                    #line 78
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 78
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoDiffuse));
                    mixin.Mixin.AddComposition("albedoDiffuse", __subMixin.Mixin);
                }
            }

            #line 81
            if (context.GetParam(MaterialParameters.AlbedoSpecular) != null)
            {

                {

                    #line 83
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 83
                    context.Mixin(__subMixin, "ComputeBRDFColorSpecularBlinnPhong");
                    mixin.Mixin.AddComposition("SpecularLighting", __subMixin.Mixin);
                }

                {

                    #line 84
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 84
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoSpecular));
                    mixin.Mixin.AddComposition("albedoSpecular", __subMixin.Mixin);
                }

                #line 86
                if (context.GetParam(MaterialParameters.SpecularPowerMap) != null)
                {

                    #line 88
                    context.Mixin(mixin, "SpecularPower");

                    {

                        #line 89
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                        #line 89
                        context.Mixin(__subMixin, context.GetParam(MaterialParameters.SpecularPowerMap));
                        mixin.Mixin.AddComposition("SpecularPowerMap", __subMixin.Mixin);
                    }
                }

                #line 92
                if (context.GetParam(MaterialParameters.SpecularIntensityMap) != null)
                {

                    {

                        #line 94
                        var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                        #line 94
                        context.Mixin(__subMixin, context.GetParam(MaterialParameters.SpecularIntensityMap));
                        mixin.Mixin.AddComposition("SpecularIntensityMap", __subMixin.Mixin);
                    }
                }
            }

            {

                #line 98
                var __subMixin = new ShaderMixinSourceTree() { Name = "WithSkinning", Parent = mixin };
                mixin.Children.Add(__subMixin);

                #line 98
                context.BeginChild(__subMixin);

                #line 98
                context.Mixin(__subMixin, "WithSkinning");

                #line 98
                context.EndChild();
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("BasicEffect", new BasicEffect());
        }
    }
}
