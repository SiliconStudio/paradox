// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
using SiliconStudio.Paradox.Effects.Data;
using SiliconStudio.Paradox.Shaders.Compiler;

namespace SiliconStudio.Paradox.Effects
{
    shader BasicEffect
    {
        using params RenderingParameters;
        using params MaterialParameters;
        using params EffectSystem;
        using params CompilerParameters;
              
        mixin ShaderBase;
        mixin TransformationWAndVP;

        mixin PositionVSStream;

        var hasNormals = MaterialParameters.NormalMap != null;
        if (hasNormals)
        {
            mixin NormalMapTexture;
            mixin compose normalMap = MaterialParameters.NormalMap;
        }
        else
        {
            mixin NormalVSStream;
        }

        mixin BRDFDiffuseBase;
        mixin BRDFSpecularBase;
        mixin LightMultiDirectionalShadingPerPixel<2>;
        mixin TransparentShading;
        mixin DiscardTransparent;
                                 
        if (MaterialParameters.AlbedoDiffuse != null)
        {
            mixin compose DiffuseLighting = ComputeBRDFDiffuseLambert;
            mixin compose albedoDiffuse = MaterialParameters.AlbedoDiffuse;
        }

        if (MaterialParameters.AlbedoSpecular != null)
        {
            mixin compose SpecularLighting = ComputeBRDFColorSpecularBlinnPhong;
            mixin compose albedoSpecular = MaterialParameters.AlbedoSpecular;

            if (MaterialParameters.SpecularPowerMap != null)
            {
                mixin SpecularPower;
                mixin compose SpecularPowerMap = MaterialParameters.SpecularPowerMap;
            }

            if (MaterialParameters.SpecularIntensityMap != null)
            {
                mixin compose SpecularIntensityMap = MaterialParameters.SpecularIntensityMap;
            }
        }

        if (MaterialParameters.HasSkinningPosition)
        {
            if (MaterialParameters.SkinningBones > MaterialParameters.SkinningMaxBones)
            {
                // TODO: We should use next power of two minus constant to limit shader permutations?
                MaterialParameters.SkinningMaxBones = MaterialParameters.SkinningBones;
            }
            mixin macro MaterialParameters.SkinningMaxBones;
            mixin TransformationSkinning;
         
            if (MaterialParameters.HasSkinningNormal)
            {
                if (hasNormals)
                    mixin TangentToViewSkinning;
                else
                    mixin NormalVSSkinning;

                mixin NormalSkinning;
            }

            if (MaterialParameters.HasSkinningTangent)
                mixin TangentSkinning;
        }
    };
}