// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
using SiliconStudio.Paradox.Effects.Data;
using SiliconStudio.Paradox.Engine;
using SiliconStudio.Paradox.DataModel;

namespace DefaultEffects
{
    // Parameters used for Lighting
    params LightingParameters
    {
        int PerPixelDirectionalLightCount;
        int PerPixelDiffuseDirectionalLightCount;
        int PerVertexDirectionalLightCount;
        int PerVertexDiffusePixelSpecularDirectionalLightCount;
    };

    // Spawn a sub-shader for the GBuffer pass
    partial shader ParadoxGBufferShaderPass
    {
        using params MaterialParameters;

        // Clone the current state of mixins into this shader
        mixin clone;
        mixin GBuffer;
        mixin NormalVSStream;
        
        if (MaterialParameters.SpecularPowerMap != null)
        {
            mixin SpecularPower;
            mixin compose SpecularPowerMap = MaterialParameters.SpecularPowerMap;
        }

        if (MaterialParameters.SpecularIntensityMap != null)
        {
            mixin compose SpecularIntensityMap = MaterialParameters.SpecularIntensityMap;
        }
    };

    // Partial shader for GBuffer
    partial shader ParadoxGBufferPlugin
    {
        mixin child ParadoxGBufferShaderPass;

        // Remove somes mixins from current state
        //mixin remove PositionVSStream;    
        mixin remove NormalVSStream;
        mixin remove SpecularPowerMap;
        mixin remove SpecularPowerPerMesh;
        
        // Use Position, Normal and specular power from GBuffer
        mixin NormalVSGBuffer;        // Add mixin to current state
        //mixin PositionVSGBuffer;
        mixin SpecularPowerGBuffer;
    };

    partial shader ParadoxDeferredLightingPointGroup
    {
        using params LightingKeys;

        mixin macro DEFERRED_MAX_POINT_LIGHT_COUNT = LightingKeys.MaxDeferredLights;
        mixin DeferredPointLighting;
    };
    
    partial shader DeferredLightingDirectShadowGroup
    {
        using params LightingKeys;
        using params ShadowMapParameters;

        mixin DeferredDirectionalShadowLighting;

        mixin ShadowMapCascadeBase;

        mixin macro SHADOWMAP_COUNT = 1;
        mixin macro SHADOWMAP_CASCADE_COUNT = ShadowMapParameters.ShadowMapCascadeCount;
        mixin macro SHADOWMAP_TOTAL_COUNT = ShadowMapParameters.ShadowMapCascadeCount;
        mixin macro HAS_DYNAMIC_SHADOWMAP_COUNT = 0;
    };

    partial shader DeferredLightingSpotShadowGroup
    {
        using params LightingKeys;
        using params ShadowMapParameters;

        mixin DeferredSpotShadowLighting;

        mixin ShadowMapCascadeBase;

        mixin macro SHADOWMAP_COUNT = 1;
        mixin macro SHADOWMAP_CASCADE_COUNT = ShadowMapParameters.ShadowMapCascadeCount;
        mixin macro SHADOWMAP_TOTAL_COUNT = ShadowMapParameters.ShadowMapCascadeCount;
        mixin macro HAS_DYNAMIC_SHADOWMAP_COUNT = 0;
    };

    partial shader DeferredLightTypeGroup
    {
        using params ShadowMapParameters;

        if (ShadowMapParameters.LightType == LightType.Directional)
            mixin DeferredLightingDirectShadowGroup;
        else if (ShadowMapParameters.LightType == LightType.Spot)
            mixin DeferredLightingSpotShadowGroup;
        else
            mixin DeferredLightingDirectShadowGroup;
    };

    partial shader NearestFilterGroup
    {
        mixin DeferredLightTypeGroup;
        mixin ShadowMapFilterDefault;
    };

    partial shader PcfGroup
    {
        mixin DeferredLightTypeGroup;
        mixin ShadowMapFilterPcf;
    };
    
    partial shader VsmGroup
    {
        mixin DeferredLightTypeGroup;
        mixin ShadowMapFilterVsm;
    };

    partial shader ParadoxShadowPrepassLighting
    {
        using params ShadowMapParameters;

        mixin clone;
        mixin DeferredShadowLightingShader;

        if (ShadowMapParameters.FilterType == ShadowMapFilterType.Nearest)
            mixin compose shadows += NearestFilterGroup;
        else if (ShadowMapParameters.FilterType == ShadowMapFilterType.PercentageCloserFiltering)
            mixin compose shadows += PcfGroup;
        else if (ShadowMapParameters.FilterType == ShadowMapFilterType.Variance)
            mixin compose shadows += VsmGroup;
    };

    partial shader ParadoxDeferredLightingDirectGroup
    {
        using params LightingKeys;

        mixin DeferredDirectionalLighting;
    };

    partial shader ParadoxDeferredLightingSpotGroup
    {
        using params LightingKeys;

        mixin DeferredSpotLighting;
    };

    partial shader ParadoxDirectPrepassLighting
    {
        mixin clone;
        mixin compose lightingGroups += ParadoxDeferredLightingDirectGroup;
    };

    partial shader ParadoxPointPrepassLighting
    {
        using params LightingKeys;

        mixin clone;
        if (LightingKeys.MaxDeferredLights > 0)
            mixin compose lightingGroups += ParadoxDeferredLightingPointGroup;
    };

    partial shader ParadoxSpotPrepassLighting
    {
        using params LightingKeys;

        mixin clone;
        mixin compose lightingGroups += ParadoxDeferredLightingSpotGroup;
    };

    partial shader ParadoxDeferredSpecular
    {
        mixin ComputeBRDFColorSpecularBlinnPhong;
        mixin SpecularPowerGBuffer;
        mixin compose SpecularIntensityMap = ComputeColorOne;
    };

    shader ParadoxDefaultLightPrepassEffect
    {
        using params LightingKeys;

        mixin PositionVSGBuffer;
        mixin NormalVSGBuffer;
        mixin BRDFDiffuseBase;
        mixin BRDFSpecularBase;
        mixin compose DiffuseColor = ComputeBRDFColorFresnel;
        mixin compose DiffuseLighting = ComputeBRDFDiffuseLambert;
        mixin compose SpecularColor = ComputeBRDFColor;
        mixin compose SpecularLighting = ParadoxDeferredSpecular;

        mixin child ParadoxShadowPrepassLighting;

        mixin DeferredLightingShader;

        mixin child ParadoxDirectPrepassLighting;

        mixin child ParadoxSpotPrepassLighting;

        mixin child ParadoxPointPrepassLighting;
    };

    partial shader DirectionalLightsShader
    {
        using params LightingKeys;
        using params MaterialParameters;

        mixin macro LIGHTING_MAX_LIGHT_COUNT = LightingKeys.MaxDirectionalLights;
        if (LightingKeys.UnrollDirectionalLightLoop)
            mixin macro LIGHTING_UNROLL_LOOP = true;

        if (MaterialParameters.LightingType == MaterialLightingType.DiffusePixel)
        {
            mixin ShadingDiffusePerPixel;
        }
        else if (MaterialParameters.LightingType == MaterialLightingType.DiffuseVertex)
        {
            mixin ShadingDiffusePerVertex;
        }
        else if (MaterialParameters.LightingType == MaterialLightingType.DiffuseSpecularPixel)
        {
            mixin ShadingDiffuseSpecularPerPixel;
        }
        else if (MaterialParameters.LightingType == MaterialLightingType.DiffuseVertexSpecularPixel)
        {
            mixin ShadingDiffusePerVertexSpecularPerPixel;
        }
        mixin DirectionalShading;
        mixin ShadingEyeNormalVS;
    };

    partial shader ParadoxDiffuseDeferred
    {
        using params MaterialParameters;

        if (MaterialParameters.AlbedoDiffuse != null)
        {
            mixin compose albedoDiffuse = MaterialParameters.AlbedoDiffuse;
        }
    };

    partial shader ParadoxSpecularDeferred
    {
        using params MaterialParameters;

        if (MaterialParameters.AlbedoSpecular != null)
        {
            mixin compose albedoSpecular = MaterialParameters.AlbedoSpecular;
        }
    };

    shader ParadoxDefaultDeferredShader
    {
        using params MaterialParameters;
        using params RenderingParameters;

        mixin ParadoxBaseShader;

        mixin ParadoxSkinning;

        mixin ParadoxShadowCast;
    
        // Activate deferred rendering if flag is set
        // Disable deferred in case of Transparent
        if (RenderingParameters.UseDeferred && !MaterialParameters.UseTransparent)
        {
            mixin ParadoxGBufferPlugin;
            mixin LightDeferredShading;
            mixin ParadoxDiffuseDeferred;
            mixin ParadoxSpecularDeferred;

            if (MaterialParameters.AmbientMap != null)
            {
                mixin AmbientMapShading;
                mixin compose AmbientMap = MaterialParameters.AmbientMap;
            }
        }
        else
        {
            mixin ParadoxDiffuseForward;
            mixin ParadoxSpecularForward;

            if (MaterialParameters.AmbientMap != null)
            {
                mixin AmbientMapShading;
                mixin compose AmbientMap = MaterialParameters.AmbientMap;
            }

            if (MaterialParameters.UseTransparent)
            {
                mixin TransparentShading;
                mixin DiscardTransparent;
            }
        }
    };
}