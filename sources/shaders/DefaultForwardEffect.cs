// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Paradox Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Paradox.VisualStudio.Package .vsix
// and re-save the associated .pdxfx.
// </auto-generated>

using SiliconStudio.Core;
using SiliconStudio.Paradox.Effects;
using SiliconStudio.Paradox.Shaders;
using SiliconStudio.Core.Mathematics;
using SiliconStudio.Paradox.Graphics;


#line 3 "C:\Projects\Paradox\sources\shaders\DefaultForwardEffect.pdxfx"
using SiliconStudio.Paradox.Effects.Data;

#line 4
using SiliconStudio.Paradox.Effects.Modules;

#line 5
using SiliconStudio.Paradox.Engine;

#line 6
using SiliconStudio.Paradox.DataModel;

#line 8
namespace DefaultForward
{

    #line 10
    public partial class ParadoxLightingTypeShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 14
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffusePixel)
            {

                #line 16
                context.Mixin(mixin, "ShadingDiffusePerPixel");
            }

            #line 18
            else 
#line 18
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseVertex)
            {

                #line 20
                context.Mixin(mixin, "ShadingDiffusePerVertex");
            }

            #line 22
            else 
#line 22
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseSpecularPixel)
            {

                #line 24
                context.Mixin(mixin, "ShadingDiffuseSpecularPerPixel");
            }

            #line 26
            else 
#line 26
            if (context.GetParam(MaterialParameters.LightingType) == MaterialLightingType.DiffuseVertexSpecularPixel)
            {

                #line 28
                context.Mixin(mixin, "ShadingDiffusePerVertexSpecularPerPixel");
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxLightingTypeShader", new ParadoxLightingTypeShader());
        }
    }

    #line 32
    public partial class ParadoxPointLightsShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 37
            mixin.Mixin.AddMacro("LIGHTING_MAX_LIGHT_COUNT", context.GetParam(LightingKeys.MaxPointLights));

            #line 41
            context.Mixin(mixin, "ParadoxLightingTypeShader");

            #line 42
            context.Mixin(mixin, "PointShading");

            #line 43
            context.Mixin(mixin, "ShadingEyeNormalVS");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxPointLightsShader", new ParadoxPointLightsShader());
        }
    }

    #line 46
    public partial class ParadoxSpotLightsShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 51
            mixin.Mixin.AddMacro("LIGHTING_MAX_LIGHT_COUNT", context.GetParam(LightingKeys.MaxSpotLights));

            #line 55
            context.Mixin(mixin, "ParadoxLightingTypeShader");

            #line 56
            context.Mixin(mixin, "SpotShading");

            #line 57
            context.Mixin(mixin, "ShadingEyeNormalVS");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxSpotLightsShader", new ParadoxSpotLightsShader());
        }
    }

    #line 60
    public partial class ParadoxDirectionalLightsShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 66
            mixin.Mixin.AddMacro("LIGHTING_MAX_LIGHT_COUNT", context.GetParam(LightingKeys.MaxDirectionalLights));

            #line 70
            context.Mixin(mixin, "ParadoxLightingTypeShader");

            #line 71
            context.Mixin(mixin, "DirectionalShading");

            #line 72
            context.Mixin(mixin, "ShadingEyeNormalVS");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDirectionalLightsShader", new ParadoxDirectionalLightsShader());
        }
    }

    #line 75
    public partial class ParadoxDirectionalShadowLightsShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 82
            mixin.Mixin.AddMacro("LIGHTING_MAX_LIGHT_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCount));

            #line 85
            context.Mixin(mixin, "ParadoxLightingTypeShader");

            #line 86
            context.Mixin(mixin, "ShadingPerPixelShadow");

            #line 87
            context.Mixin(mixin, "DirectionalShading");

            #line 88
            context.Mixin(mixin, "ShadingEyeNormalVS");

            #line 91
            context.Mixin(mixin, "ShadowMapCascadeBase");

            #line 93
            mixin.Mixin.AddMacro("SHADOWMAP_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCount));

            #line 94
            mixin.Mixin.AddMacro("SHADOWMAP_CASCADE_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 95
            mixin.Mixin.AddMacro("SHADOWMAP_TOTAL_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCount) * context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 98
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Nearest)

                #line 99
                context.Mixin(mixin, "ShadowMapFilterDefault");

            #line 100
            else 
#line 100
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.PercentageCloserFiltering)

                #line 101
                context.Mixin(mixin, "ShadowMapFilterPcf");

            #line 102
            else 
#line 102
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Variance)

                #line 103
                context.Mixin(mixin, "ShadowMapFilterVsm");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDirectionalShadowLightsShader", new ParadoxDirectionalShadowLightsShader());
        }
    }

    #line 106
    public partial class ParadoxSpotShadowLightsShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 113
            mixin.Mixin.AddMacro("LIGHTING_MAX_LIGHT_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCount));

            #line 116
            context.Mixin(mixin, "ParadoxLightingTypeShader");

            #line 117
            context.Mixin(mixin, "ShadingPerPixelShadow");

            #line 118
            context.Mixin(mixin, "SpotShading");

            #line 119
            context.Mixin(mixin, "ShadingEyeNormalVS");

            #line 122
            context.Mixin(mixin, "ShadowMapCascadeBase");

            #line 124
            mixin.Mixin.AddMacro("SHADOWMAP_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCount));

            #line 125
            mixin.Mixin.AddMacro("SHADOWMAP_CASCADE_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 126
            mixin.Mixin.AddMacro("SHADOWMAP_TOTAL_COUNT", context.GetParam(ShadowMapParameters.ShadowMapCount) * context.GetParam(ShadowMapParameters.ShadowMapCascadeCount));

            #line 129
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Nearest)

                #line 130
                context.Mixin(mixin, "ShadowMapFilterDefault");

            #line 131
            else 
#line 131
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.PercentageCloserFiltering)

                #line 132
                context.Mixin(mixin, "ShadowMapFilterPcf");

            #line 133
            else 
#line 133
            if (context.GetParam(ShadowMapParameters.FilterType) == ShadowMapFilterType.Variance)

                #line 134
                context.Mixin(mixin, "ShadowMapFilterVsm");
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxSpotShadowLightsShader", new ParadoxSpotShadowLightsShader());
        }
    }

    #line 137
    public partial class ParadoxDiffuseForward  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 143
            context.Mixin(mixin, "BRDFDiffuseBase");

            #line 144
            context.Mixin(mixin, "BRDFSpecularBase");

            #line 146
            if (context.GetParam(MaterialParameters.AlbedoDiffuse) != null)
            {

                #line 148
                context.Mixin(mixin, "AlbedoDiffuseBase");

                {

                    #line 149
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 149
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoDiffuse));
                    mixin.Mixin.AddComposition("albedoDiffuse", __subMixin.Mixin);
                }

                #line 151
                if (context.GetParam(LightingKeys.MaxDirectionalLights) > 0 || context.GetParam(LightingKeys.MaxSpotLights) > 0 || context.GetParam(LightingKeys.MaxPointLights) > 0 || (context.GetParam(LightingKeys.ReceiveShadows) && context.GetParam(ShadowMapParameters.ShadowMaps) != null && context.GetParam(ShadowMapParameters.ShadowMaps).Length > 0))
                {

                    #line 153
                    if (context.GetParam(LightingKeys.MaxDirectionalLights) > 0 || context.GetParam(LightingKeys.MaxSpotLights) > 0 || context.GetParam(LightingKeys.MaxPointLights) > 0)
                    {

                        #line 155
                        context.Mixin(mixin, "GroupShadingBase");

                        #line 157
                        if (context.GetParam(LightingKeys.MaxDirectionalLights) > 0)

                            {

                                #line 158
                                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                                #line 158
                                context.Mixin(__subMixin, "ParadoxDirectionalLightsShader");
                                mixin.Mixin.AddCompositionToArray("ShadingGroups", __subMixin.Mixin);
                            }

                        #line 159
                        if (context.GetParam(LightingKeys.MaxSpotLights) > 0)

                            {

                                #line 160
                                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                                #line 160
                                context.Mixin(__subMixin, "ParadoxSpotLightsShader");
                                mixin.Mixin.AddCompositionToArray("ShadingGroups", __subMixin.Mixin);
                            }

                        #line 161
                        if (context.GetParam(LightingKeys.MaxPointLights) > 0)

                            {

                                #line 162
                                var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                                #line 162
                                context.Mixin(__subMixin, "ParadoxPointLightsShader");
                                mixin.Mixin.AddCompositionToArray("ShadingGroups", __subMixin.Mixin);
                            }
                    }

                    #line 164
                    if (context.GetParam(LightingKeys.ReceiveShadows) && context.GetParam(ShadowMapParameters.ShadowMaps) != null && context.GetParam(ShadowMapParameters.ShadowMaps).Length > 0)
                    {

                        #line 166
                        context.Mixin(mixin, "ShadowMapReceiver");

                        #line 167
                        foreach(var ____1 in context.GetParam(ShadowMapParameters.ShadowMaps))

                        {

                            #line 167
                            context.PushParameters(____1);

                            #line 169
                            if (context.GetParam(ShadowMapParameters.LightType) == LightType.Directional)

                                {

                                    #line 170
                                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                                    #line 170
                                    context.Mixin(__subMixin, "ParadoxDirectionalShadowLightsShader");
                                    mixin.Mixin.AddCompositionToArray("shadows", __subMixin.Mixin);
                                }

                            #line 171
                            else 
#line 171
                            if (context.GetParam(ShadowMapParameters.LightType) == LightType.Spot)

                                {

                                    #line 172
                                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                                    #line 172
                                    context.Mixin(__subMixin, "ParadoxSpotShadowLightsShader");
                                    mixin.Mixin.AddCompositionToArray("shadows", __subMixin.Mixin);
                                }

                            #line 167
                            context.PopParameters();
                        }
                    }

                    #line 176
                    if (context.GetParam(MaterialParameters.DiffuseModel) == MaterialDiffuseModel.None || context.GetParam(MaterialParameters.DiffuseModel) == MaterialDiffuseModel.Lambert)
                    {

                        {

                            #line 178
                            var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                            #line 178
                            context.Mixin(__subMixin, "ComputeBRDFDiffuseLambert");
                            mixin.Mixin.AddComposition("DiffuseLighting", __subMixin.Mixin);
                        }
                    }

                    #line 180
                    else 
#line 180
                    if (context.GetParam(MaterialParameters.DiffuseModel) == MaterialDiffuseModel.OrenNayar)
                    {

                        {

                            #line 182
                            var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                            #line 182
                            context.Mixin(__subMixin, "ComputeBRDFDiffuseOrenNayar");
                            mixin.Mixin.AddComposition("DiffuseLighting", __subMixin.Mixin);
                        }
                    }
                }

                #line 186
                else
                {

                    #line 187
                    context.Mixin(mixin, "AlbedoFlatShading");
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDiffuseForward", new ParadoxDiffuseForward());
        }
    }

    #line 192
    public partial class ParadoxSpecularLighting  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 196
            if (context.GetParam(MaterialParameters.SpecularModel) == MaterialSpecularModel.None || context.GetParam(MaterialParameters.SpecularModel) == MaterialSpecularModel.Phong)
            {

                #line 198
                context.Mixin(mixin, "ComputeBRDFColorSpecularPhong");
            }

            #line 200
            else 
#line 200
            if (context.GetParam(MaterialParameters.SpecularModel) == MaterialSpecularModel.BlinnPhong)
            {

                #line 202
                context.Mixin(mixin, "ComputeBRDFColorSpecularBlinnPhong");
            }

            #line 204
            else 
#line 204
            if (context.GetParam(MaterialParameters.SpecularModel) == MaterialSpecularModel.CookTorrance)
            {

                #line 206
                context.Mixin(mixin, "ComputeBRDFColorSpecularCookTorrance");
            }

            #line 211
            if (context.GetParam(MaterialParameters.SpecularPowerMap) != null)
            {

                #line 213
                context.Mixin(mixin, "SpecularPower");

                {

                    #line 214
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 214
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.SpecularPowerMap));
                    mixin.Mixin.AddComposition("SpecularPowerMap", __subMixin.Mixin);
                }
            }

            #line 217
            if (context.GetParam(MaterialParameters.SpecularIntensityMap) != null)
            {

                {

                    #line 219
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 219
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.SpecularIntensityMap));
                    mixin.Mixin.AddComposition("SpecularIntensityMap", __subMixin.Mixin);
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxSpecularLighting", new ParadoxSpecularLighting());
        }
    }

    #line 223
    public partial class ParadoxSpecularForward  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 228
            context.Mixin(mixin, "BRDFDiffuseBase");

            #line 229
            context.Mixin(mixin, "BRDFSpecularBase");

            #line 231
            if (context.GetParam(MaterialParameters.AlbedoSpecular) != null)
            {

                #line 233
                context.Mixin(mixin, "AlbedoSpecularBase");

                {

                    #line 234
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 234
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AlbedoSpecular));
                    mixin.Mixin.AddComposition("albedoSpecular", __subMixin.Mixin);
                }

                {

                    #line 235
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 235
                    context.Mixin(__subMixin, "ParadoxSpecularLighting");
                    mixin.Mixin.AddComposition("SpecularLighting", __subMixin.Mixin);
                }
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxSpecularForward", new ParadoxSpecularForward());
        }
    }

    #line 239
    public partial class ParadoxDefaultForwardShader  : IShaderMixinBuilder
    {
        public void Generate(ShaderMixinSourceTree mixin, ShaderMixinContext context)
        {

            #line 243
            context.Mixin(mixin, "ParadoxBaseShader");

            #line 245
            context.Mixin(mixin, "ParadoxSkinning");

            #line 247
            context.Mixin(mixin, "ParadoxShadowCast");

            #line 249
            context.Mixin(mixin, "ParadoxDiffuseForward");

            #line 250
            context.Mixin(mixin, "ParadoxSpecularForward");

            #line 252
            if (context.GetParam(MaterialParameters.AmbientMap) != null)
            {

                #line 254
                context.Mixin(mixin, "AmbientMapShading");

                {

                    #line 255
                    var __subMixin = new ShaderMixinSourceTree() { Parent = mixin };

                    #line 255
                    context.Mixin(__subMixin, context.GetParam(MaterialParameters.AmbientMap));
                    mixin.Mixin.AddComposition("AmbientMap", __subMixin.Mixin);
                }
            }

            #line 258
            if (context.GetParam(MaterialParameters.UseTransparentMask))
            {

                #line 260
                context.Mixin(mixin, "TransparentShading");

                #line 261
                context.Mixin(mixin, "DiscardTransparentThreshold", context.GetParam(MaterialParameters.AlphaDiscardThreshold));
            }

            #line 263
            else 
#line 263
            if (context.GetParam(MaterialParameters.UseTransparent))
            {

                #line 265
                context.Mixin(mixin, "TransparentShading");

                #line 266
                context.Mixin(mixin, "DiscardTransparent");
            }
        }

        [ModuleInitializer]
        internal static void __Initialize__()

        {
            ShaderMixinManager.Register("ParadoxDefaultForwardShader", new ParadoxDefaultForwardShader());
        }
    }
}
